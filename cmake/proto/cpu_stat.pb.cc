// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cpu_stat.proto

#include "cpu_stat.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace monitor {
namespace proto {
class CpuStatDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CpuStat> _instance;
} _CpuStat_default_instance_;
}  // namespace proto
}  // namespace monitor
static void InitDefaultsscc_info_CpuStat_cpu_5fstat_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::monitor::proto::_CpuStat_default_instance_;
    new (ptr) ::monitor::proto::CpuStat();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CpuStat_cpu_5fstat_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CpuStat_cpu_5fstat_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_cpu_5fstat_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_cpu_5fstat_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_cpu_5fstat_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_cpu_5fstat_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::monitor::proto::CpuStat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::monitor::proto::CpuStat, cpu_name_),
  PROTOBUF_FIELD_OFFSET(::monitor::proto::CpuStat, cpu_percent_),
  PROTOBUF_FIELD_OFFSET(::monitor::proto::CpuStat, usr_percent_),
  PROTOBUF_FIELD_OFFSET(::monitor::proto::CpuStat, system_percent_),
  PROTOBUF_FIELD_OFFSET(::monitor::proto::CpuStat, nice_percent_),
  PROTOBUF_FIELD_OFFSET(::monitor::proto::CpuStat, idle_percent_),
  PROTOBUF_FIELD_OFFSET(::monitor::proto::CpuStat, io_wait_percent_),
  PROTOBUF_FIELD_OFFSET(::monitor::proto::CpuStat, irq_percent_),
  PROTOBUF_FIELD_OFFSET(::monitor::proto::CpuStat, soft_irq_percent_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::monitor::proto::CpuStat)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::monitor::proto::_CpuStat_default_instance_),
};

const char descriptor_table_protodef_cpu_5fstat_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\016cpu_stat.proto\022\rmonitor.proto\"\321\001\n\007CpuS"
  "tat\022\020\n\010cpu_name\030\001 \001(\t\022\023\n\013cpu_percent\030\002 \001"
  "(\002\022\023\n\013usr_percent\030\003 \001(\002\022\026\n\016system_percen"
  "t\030\004 \001(\002\022\024\n\014nice_percent\030\005 \001(\002\022\024\n\014idle_pe"
  "rcent\030\006 \001(\002\022\027\n\017io_wait_percent\030\007 \001(\002\022\023\n\013"
  "irq_percent\030\010 \001(\002\022\030\n\020soft_irq_percent\030\t "
  "\001(\002b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_cpu_5fstat_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_cpu_5fstat_2eproto_sccs[1] = {
  &scc_info_CpuStat_cpu_5fstat_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_cpu_5fstat_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_cpu_5fstat_2eproto = {
  false, false, descriptor_table_protodef_cpu_5fstat_2eproto, "cpu_stat.proto", 251,
  &descriptor_table_cpu_5fstat_2eproto_once, descriptor_table_cpu_5fstat_2eproto_sccs, descriptor_table_cpu_5fstat_2eproto_deps, 1, 0,
  schemas, file_default_instances, TableStruct_cpu_5fstat_2eproto::offsets,
  file_level_metadata_cpu_5fstat_2eproto, 1, file_level_enum_descriptors_cpu_5fstat_2eproto, file_level_service_descriptors_cpu_5fstat_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_cpu_5fstat_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_cpu_5fstat_2eproto)), true);
namespace monitor {
namespace proto {

// ===================================================================

class CpuStat::_Internal {
 public:
};

CpuStat::CpuStat(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:monitor.proto.CpuStat)
}
CpuStat::CpuStat(const CpuStat& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  cpu_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_cpu_name().empty()) {
    cpu_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_cpu_name(), 
      GetArena());
  }
  ::memcpy(&cpu_percent_, &from.cpu_percent_,
    static_cast<size_t>(reinterpret_cast<char*>(&soft_irq_percent_) -
    reinterpret_cast<char*>(&cpu_percent_)) + sizeof(soft_irq_percent_));
  // @@protoc_insertion_point(copy_constructor:monitor.proto.CpuStat)
}

void CpuStat::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CpuStat_cpu_5fstat_2eproto.base);
  cpu_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&cpu_percent_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&soft_irq_percent_) -
      reinterpret_cast<char*>(&cpu_percent_)) + sizeof(soft_irq_percent_));
}

CpuStat::~CpuStat() {
  // @@protoc_insertion_point(destructor:monitor.proto.CpuStat)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CpuStat::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  cpu_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CpuStat::ArenaDtor(void* object) {
  CpuStat* _this = reinterpret_cast< CpuStat* >(object);
  (void)_this;
}
void CpuStat::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CpuStat::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CpuStat& CpuStat::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CpuStat_cpu_5fstat_2eproto.base);
  return *internal_default_instance();
}


void CpuStat::Clear() {
// @@protoc_insertion_point(message_clear_start:monitor.proto.CpuStat)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cpu_name_.ClearToEmpty();
  ::memset(&cpu_percent_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&soft_irq_percent_) -
      reinterpret_cast<char*>(&cpu_percent_)) + sizeof(soft_irq_percent_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CpuStat::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string cpu_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_cpu_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "monitor.proto.CpuStat.cpu_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float cpu_percent = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          cpu_percent_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float usr_percent = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          usr_percent_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float system_percent = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          system_percent_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float nice_percent = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          nice_percent_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float idle_percent = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          idle_percent_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float io_wait_percent = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          io_wait_percent_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float irq_percent = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          irq_percent_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float soft_irq_percent = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          soft_irq_percent_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CpuStat::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:monitor.proto.CpuStat)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string cpu_name = 1;
  if (this->cpu_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_cpu_name().data(), static_cast<int>(this->_internal_cpu_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "monitor.proto.CpuStat.cpu_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_cpu_name(), target);
  }

  // float cpu_percent = 2;
  if (!(this->cpu_percent() <= 0 && this->cpu_percent() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_cpu_percent(), target);
  }

  // float usr_percent = 3;
  if (!(this->usr_percent() <= 0 && this->usr_percent() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_usr_percent(), target);
  }

  // float system_percent = 4;
  if (!(this->system_percent() <= 0 && this->system_percent() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_system_percent(), target);
  }

  // float nice_percent = 5;
  if (!(this->nice_percent() <= 0 && this->nice_percent() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_nice_percent(), target);
  }

  // float idle_percent = 6;
  if (!(this->idle_percent() <= 0 && this->idle_percent() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_idle_percent(), target);
  }

  // float io_wait_percent = 7;
  if (!(this->io_wait_percent() <= 0 && this->io_wait_percent() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_io_wait_percent(), target);
  }

  // float irq_percent = 8;
  if (!(this->irq_percent() <= 0 && this->irq_percent() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(8, this->_internal_irq_percent(), target);
  }

  // float soft_irq_percent = 9;
  if (!(this->soft_irq_percent() <= 0 && this->soft_irq_percent() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(9, this->_internal_soft_irq_percent(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:monitor.proto.CpuStat)
  return target;
}

size_t CpuStat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:monitor.proto.CpuStat)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string cpu_name = 1;
  if (this->cpu_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_cpu_name());
  }

  // float cpu_percent = 2;
  if (!(this->cpu_percent() <= 0 && this->cpu_percent() >= 0)) {
    total_size += 1 + 4;
  }

  // float usr_percent = 3;
  if (!(this->usr_percent() <= 0 && this->usr_percent() >= 0)) {
    total_size += 1 + 4;
  }

  // float system_percent = 4;
  if (!(this->system_percent() <= 0 && this->system_percent() >= 0)) {
    total_size += 1 + 4;
  }

  // float nice_percent = 5;
  if (!(this->nice_percent() <= 0 && this->nice_percent() >= 0)) {
    total_size += 1 + 4;
  }

  // float idle_percent = 6;
  if (!(this->idle_percent() <= 0 && this->idle_percent() >= 0)) {
    total_size += 1 + 4;
  }

  // float io_wait_percent = 7;
  if (!(this->io_wait_percent() <= 0 && this->io_wait_percent() >= 0)) {
    total_size += 1 + 4;
  }

  // float irq_percent = 8;
  if (!(this->irq_percent() <= 0 && this->irq_percent() >= 0)) {
    total_size += 1 + 4;
  }

  // float soft_irq_percent = 9;
  if (!(this->soft_irq_percent() <= 0 && this->soft_irq_percent() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CpuStat::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:monitor.proto.CpuStat)
  GOOGLE_DCHECK_NE(&from, this);
  const CpuStat* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CpuStat>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:monitor.proto.CpuStat)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:monitor.proto.CpuStat)
    MergeFrom(*source);
  }
}

void CpuStat::MergeFrom(const CpuStat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:monitor.proto.CpuStat)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.cpu_name().size() > 0) {
    _internal_set_cpu_name(from._internal_cpu_name());
  }
  if (!(from.cpu_percent() <= 0 && from.cpu_percent() >= 0)) {
    _internal_set_cpu_percent(from._internal_cpu_percent());
  }
  if (!(from.usr_percent() <= 0 && from.usr_percent() >= 0)) {
    _internal_set_usr_percent(from._internal_usr_percent());
  }
  if (!(from.system_percent() <= 0 && from.system_percent() >= 0)) {
    _internal_set_system_percent(from._internal_system_percent());
  }
  if (!(from.nice_percent() <= 0 && from.nice_percent() >= 0)) {
    _internal_set_nice_percent(from._internal_nice_percent());
  }
  if (!(from.idle_percent() <= 0 && from.idle_percent() >= 0)) {
    _internal_set_idle_percent(from._internal_idle_percent());
  }
  if (!(from.io_wait_percent() <= 0 && from.io_wait_percent() >= 0)) {
    _internal_set_io_wait_percent(from._internal_io_wait_percent());
  }
  if (!(from.irq_percent() <= 0 && from.irq_percent() >= 0)) {
    _internal_set_irq_percent(from._internal_irq_percent());
  }
  if (!(from.soft_irq_percent() <= 0 && from.soft_irq_percent() >= 0)) {
    _internal_set_soft_irq_percent(from._internal_soft_irq_percent());
  }
}

void CpuStat::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:monitor.proto.CpuStat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CpuStat::CopyFrom(const CpuStat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:monitor.proto.CpuStat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CpuStat::IsInitialized() const {
  return true;
}

void CpuStat::InternalSwap(CpuStat* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  cpu_name_.Swap(&other->cpu_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CpuStat, soft_irq_percent_)
      + sizeof(CpuStat::soft_irq_percent_)
      - PROTOBUF_FIELD_OFFSET(CpuStat, cpu_percent_)>(
          reinterpret_cast<char*>(&cpu_percent_),
          reinterpret_cast<char*>(&other->cpu_percent_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CpuStat::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace monitor
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::monitor::proto::CpuStat* Arena::CreateMaybeMessage< ::monitor::proto::CpuStat >(Arena* arena) {
  return Arena::CreateMessageInternal< ::monitor::proto::CpuStat >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
