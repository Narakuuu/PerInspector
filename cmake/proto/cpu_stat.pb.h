// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cpu_stat.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_cpu_5fstat_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_cpu_5fstat_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_cpu_5fstat_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_cpu_5fstat_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_cpu_5fstat_2eproto;
namespace monitor {
namespace proto {
class CpuStat;
class CpuStatDefaultTypeInternal;
extern CpuStatDefaultTypeInternal _CpuStat_default_instance_;
}  // namespace proto
}  // namespace monitor
PROTOBUF_NAMESPACE_OPEN
template<> ::monitor::proto::CpuStat* Arena::CreateMaybeMessage<::monitor::proto::CpuStat>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace monitor {
namespace proto {

// ===================================================================

class CpuStat PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:monitor.proto.CpuStat) */ {
 public:
  inline CpuStat() : CpuStat(nullptr) {}
  virtual ~CpuStat();

  CpuStat(const CpuStat& from);
  CpuStat(CpuStat&& from) noexcept
    : CpuStat() {
    *this = ::std::move(from);
  }

  inline CpuStat& operator=(const CpuStat& from) {
    CopyFrom(from);
    return *this;
  }
  inline CpuStat& operator=(CpuStat&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CpuStat& default_instance();

  static inline const CpuStat* internal_default_instance() {
    return reinterpret_cast<const CpuStat*>(
               &_CpuStat_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CpuStat& a, CpuStat& b) {
    a.Swap(&b);
  }
  inline void Swap(CpuStat* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CpuStat* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CpuStat* New() const final {
    return CreateMaybeMessage<CpuStat>(nullptr);
  }

  CpuStat* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CpuStat>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CpuStat& from);
  void MergeFrom(const CpuStat& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CpuStat* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "monitor.proto.CpuStat";
  }
  protected:
  explicit CpuStat(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cpu_5fstat_2eproto);
    return ::descriptor_table_cpu_5fstat_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCpuNameFieldNumber = 1,
    kCpuPercentFieldNumber = 2,
    kUsrPercentFieldNumber = 3,
    kSystemPercentFieldNumber = 4,
    kNicePercentFieldNumber = 5,
    kIdlePercentFieldNumber = 6,
    kIoWaitPercentFieldNumber = 7,
    kIrqPercentFieldNumber = 8,
    kSoftIrqPercentFieldNumber = 9,
  };
  // string cpu_name = 1;
  void clear_cpu_name();
  const std::string& cpu_name() const;
  void set_cpu_name(const std::string& value);
  void set_cpu_name(std::string&& value);
  void set_cpu_name(const char* value);
  void set_cpu_name(const char* value, size_t size);
  std::string* mutable_cpu_name();
  std::string* release_cpu_name();
  void set_allocated_cpu_name(std::string* cpu_name);
  private:
  const std::string& _internal_cpu_name() const;
  void _internal_set_cpu_name(const std::string& value);
  std::string* _internal_mutable_cpu_name();
  public:

  // float cpu_percent = 2;
  void clear_cpu_percent();
  float cpu_percent() const;
  void set_cpu_percent(float value);
  private:
  float _internal_cpu_percent() const;
  void _internal_set_cpu_percent(float value);
  public:

  // float usr_percent = 3;
  void clear_usr_percent();
  float usr_percent() const;
  void set_usr_percent(float value);
  private:
  float _internal_usr_percent() const;
  void _internal_set_usr_percent(float value);
  public:

  // float system_percent = 4;
  void clear_system_percent();
  float system_percent() const;
  void set_system_percent(float value);
  private:
  float _internal_system_percent() const;
  void _internal_set_system_percent(float value);
  public:

  // float nice_percent = 5;
  void clear_nice_percent();
  float nice_percent() const;
  void set_nice_percent(float value);
  private:
  float _internal_nice_percent() const;
  void _internal_set_nice_percent(float value);
  public:

  // float idle_percent = 6;
  void clear_idle_percent();
  float idle_percent() const;
  void set_idle_percent(float value);
  private:
  float _internal_idle_percent() const;
  void _internal_set_idle_percent(float value);
  public:

  // float io_wait_percent = 7;
  void clear_io_wait_percent();
  float io_wait_percent() const;
  void set_io_wait_percent(float value);
  private:
  float _internal_io_wait_percent() const;
  void _internal_set_io_wait_percent(float value);
  public:

  // float irq_percent = 8;
  void clear_irq_percent();
  float irq_percent() const;
  void set_irq_percent(float value);
  private:
  float _internal_irq_percent() const;
  void _internal_set_irq_percent(float value);
  public:

  // float soft_irq_percent = 9;
  void clear_soft_irq_percent();
  float soft_irq_percent() const;
  void set_soft_irq_percent(float value);
  private:
  float _internal_soft_irq_percent() const;
  void _internal_set_soft_irq_percent(float value);
  public:

  // @@protoc_insertion_point(class_scope:monitor.proto.CpuStat)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cpu_name_;
  float cpu_percent_;
  float usr_percent_;
  float system_percent_;
  float nice_percent_;
  float idle_percent_;
  float io_wait_percent_;
  float irq_percent_;
  float soft_irq_percent_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cpu_5fstat_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CpuStat

// string cpu_name = 1;
inline void CpuStat::clear_cpu_name() {
  cpu_name_.ClearToEmpty();
}
inline const std::string& CpuStat::cpu_name() const {
  // @@protoc_insertion_point(field_get:monitor.proto.CpuStat.cpu_name)
  return _internal_cpu_name();
}
inline void CpuStat::set_cpu_name(const std::string& value) {
  _internal_set_cpu_name(value);
  // @@protoc_insertion_point(field_set:monitor.proto.CpuStat.cpu_name)
}
inline std::string* CpuStat::mutable_cpu_name() {
  // @@protoc_insertion_point(field_mutable:monitor.proto.CpuStat.cpu_name)
  return _internal_mutable_cpu_name();
}
inline const std::string& CpuStat::_internal_cpu_name() const {
  return cpu_name_.Get();
}
inline void CpuStat::_internal_set_cpu_name(const std::string& value) {
  
  cpu_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CpuStat::set_cpu_name(std::string&& value) {
  
  cpu_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:monitor.proto.CpuStat.cpu_name)
}
inline void CpuStat::set_cpu_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  cpu_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:monitor.proto.CpuStat.cpu_name)
}
inline void CpuStat::set_cpu_name(const char* value,
    size_t size) {
  
  cpu_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:monitor.proto.CpuStat.cpu_name)
}
inline std::string* CpuStat::_internal_mutable_cpu_name() {
  
  return cpu_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CpuStat::release_cpu_name() {
  // @@protoc_insertion_point(field_release:monitor.proto.CpuStat.cpu_name)
  return cpu_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CpuStat::set_allocated_cpu_name(std::string* cpu_name) {
  if (cpu_name != nullptr) {
    
  } else {
    
  }
  cpu_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cpu_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:monitor.proto.CpuStat.cpu_name)
}

// float cpu_percent = 2;
inline void CpuStat::clear_cpu_percent() {
  cpu_percent_ = 0;
}
inline float CpuStat::_internal_cpu_percent() const {
  return cpu_percent_;
}
inline float CpuStat::cpu_percent() const {
  // @@protoc_insertion_point(field_get:monitor.proto.CpuStat.cpu_percent)
  return _internal_cpu_percent();
}
inline void CpuStat::_internal_set_cpu_percent(float value) {
  
  cpu_percent_ = value;
}
inline void CpuStat::set_cpu_percent(float value) {
  _internal_set_cpu_percent(value);
  // @@protoc_insertion_point(field_set:monitor.proto.CpuStat.cpu_percent)
}

// float usr_percent = 3;
inline void CpuStat::clear_usr_percent() {
  usr_percent_ = 0;
}
inline float CpuStat::_internal_usr_percent() const {
  return usr_percent_;
}
inline float CpuStat::usr_percent() const {
  // @@protoc_insertion_point(field_get:monitor.proto.CpuStat.usr_percent)
  return _internal_usr_percent();
}
inline void CpuStat::_internal_set_usr_percent(float value) {
  
  usr_percent_ = value;
}
inline void CpuStat::set_usr_percent(float value) {
  _internal_set_usr_percent(value);
  // @@protoc_insertion_point(field_set:monitor.proto.CpuStat.usr_percent)
}

// float system_percent = 4;
inline void CpuStat::clear_system_percent() {
  system_percent_ = 0;
}
inline float CpuStat::_internal_system_percent() const {
  return system_percent_;
}
inline float CpuStat::system_percent() const {
  // @@protoc_insertion_point(field_get:monitor.proto.CpuStat.system_percent)
  return _internal_system_percent();
}
inline void CpuStat::_internal_set_system_percent(float value) {
  
  system_percent_ = value;
}
inline void CpuStat::set_system_percent(float value) {
  _internal_set_system_percent(value);
  // @@protoc_insertion_point(field_set:monitor.proto.CpuStat.system_percent)
}

// float nice_percent = 5;
inline void CpuStat::clear_nice_percent() {
  nice_percent_ = 0;
}
inline float CpuStat::_internal_nice_percent() const {
  return nice_percent_;
}
inline float CpuStat::nice_percent() const {
  // @@protoc_insertion_point(field_get:monitor.proto.CpuStat.nice_percent)
  return _internal_nice_percent();
}
inline void CpuStat::_internal_set_nice_percent(float value) {
  
  nice_percent_ = value;
}
inline void CpuStat::set_nice_percent(float value) {
  _internal_set_nice_percent(value);
  // @@protoc_insertion_point(field_set:monitor.proto.CpuStat.nice_percent)
}

// float idle_percent = 6;
inline void CpuStat::clear_idle_percent() {
  idle_percent_ = 0;
}
inline float CpuStat::_internal_idle_percent() const {
  return idle_percent_;
}
inline float CpuStat::idle_percent() const {
  // @@protoc_insertion_point(field_get:monitor.proto.CpuStat.idle_percent)
  return _internal_idle_percent();
}
inline void CpuStat::_internal_set_idle_percent(float value) {
  
  idle_percent_ = value;
}
inline void CpuStat::set_idle_percent(float value) {
  _internal_set_idle_percent(value);
  // @@protoc_insertion_point(field_set:monitor.proto.CpuStat.idle_percent)
}

// float io_wait_percent = 7;
inline void CpuStat::clear_io_wait_percent() {
  io_wait_percent_ = 0;
}
inline float CpuStat::_internal_io_wait_percent() const {
  return io_wait_percent_;
}
inline float CpuStat::io_wait_percent() const {
  // @@protoc_insertion_point(field_get:monitor.proto.CpuStat.io_wait_percent)
  return _internal_io_wait_percent();
}
inline void CpuStat::_internal_set_io_wait_percent(float value) {
  
  io_wait_percent_ = value;
}
inline void CpuStat::set_io_wait_percent(float value) {
  _internal_set_io_wait_percent(value);
  // @@protoc_insertion_point(field_set:monitor.proto.CpuStat.io_wait_percent)
}

// float irq_percent = 8;
inline void CpuStat::clear_irq_percent() {
  irq_percent_ = 0;
}
inline float CpuStat::_internal_irq_percent() const {
  return irq_percent_;
}
inline float CpuStat::irq_percent() const {
  // @@protoc_insertion_point(field_get:monitor.proto.CpuStat.irq_percent)
  return _internal_irq_percent();
}
inline void CpuStat::_internal_set_irq_percent(float value) {
  
  irq_percent_ = value;
}
inline void CpuStat::set_irq_percent(float value) {
  _internal_set_irq_percent(value);
  // @@protoc_insertion_point(field_set:monitor.proto.CpuStat.irq_percent)
}

// float soft_irq_percent = 9;
inline void CpuStat::clear_soft_irq_percent() {
  soft_irq_percent_ = 0;
}
inline float CpuStat::_internal_soft_irq_percent() const {
  return soft_irq_percent_;
}
inline float CpuStat::soft_irq_percent() const {
  // @@protoc_insertion_point(field_get:monitor.proto.CpuStat.soft_irq_percent)
  return _internal_soft_irq_percent();
}
inline void CpuStat::_internal_set_soft_irq_percent(float value) {
  
  soft_irq_percent_ = value;
}
inline void CpuStat::set_soft_irq_percent(float value) {
  _internal_set_soft_irq_percent(value);
  // @@protoc_insertion_point(field_set:monitor.proto.CpuStat.soft_irq_percent)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace monitor

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_cpu_5fstat_2eproto
